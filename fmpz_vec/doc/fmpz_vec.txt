/*=============================================================================

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Copyright (C) 2010 William Hart

******************************************************************************/

*******************************************************************************

    Memory management

*******************************************************************************

fmpz * _fmpz_vec_init(long len)

    Returns an initialised vector of \code{fmpz}'s of given length.

void _fmpz_vec_clear(fmpz * vec, long len)

    Clears the entries of \code{(vec, len)} and frees space allocated 
    for \code{vec}.

*******************************************************************************

    Randominsation

*******************************************************************************

void _fmpz_vec_randinit(fmpz_randstate_t state)

    Initialises the random state for \code{fmpz_vec} random functions.

void _fmpz_vec_randclear(fmpz_randstate_t state)

    Clears the random state for \code{fmpz_vec} random functions.

void _fmpz_vec_randtest(fmpz * f, fmpz_randstate_t state, 
                        long len, mp_bitcnt_t bits)

    Sets the entries of a vector of the given length to random integers with 
    up to the given number of bits per entry.

*******************************************************************************

    Bit sizes

*******************************************************************************

long _fmpz_vec_max_bits(const fmpz * vec, long len)

    If $b$ is the maximum number of bits of the absolute value of any 
    coefficient of \code{vec}, then if any coefficient of \code{vec} is 
    negative, $-b$ is returned, else $b$ is returned.

ulong _fmpz_vec_max_limbs(const fmpz * vec, long len)

    Return the maximum number of limbs needed to store any entry in 
    \code{(vec, len)}.

*******************************************************************************

    Output

*******************************************************************************

void _fmpz_vec_print(fmpz * vec, long len)

    Prints the vector of given length to \code{stdout}.  The format is 
    the length followed by two spaces, then a space separated list of 
    coefficients. If the length is zero, only $0$ is printed.

*******************************************************************************

    Assignment and basic manipulation

*******************************************************************************

void _fmpz_vec_copy(fmpz * vec1, const fmpz * vec2, long len2)

    Makes a copy of \code{(vec2, len2)} into \code{vec1}.

void _fmpz_vec_swap(fmpz * vec1, fmpz * vec2, long len2)

    Swaps the integers in \code{(vec1, len2)} and \code{(vec2, len2)}.

void _fmpz_vec_zero(fmpz * vec, long len)

    Zeros the entries of \code{(vec, len)}.

void _fmpz_vec_neg(fmpz * vec1, const fmpz * vec2, long len2)

    Negates \code{(vec2, len2)} and places it into \code{vec1}.

*******************************************************************************

    Comparison

*******************************************************************************

int _fmpz_vec_equal(const fmpz * vec1, const fmpz * vec2, long len)

    Compares two vectors of the given length and returns $1$ if they are 
    equal, otherwise returns $0$.

int _fmpz_vec_is_zero(const fmpz * vec, long len)

    Returns $1$ if \code{(vec, len)} is zero, and $0$ otherwise.

*******************************************************************************

    Sorting

*******************************************************************************

void _fmpz_vec_sort(fmpz * vec, long len)

    Sorts the coefficients of \code{vec} in ascending order.

*******************************************************************************

    Addition and subtraction

*******************************************************************************

void _fmpz_vec_add(fmpz * res, const fmpz * vec1, 
				               const fmpz * vec2, long len2)

    Sets \code{(res, len2)} to the sum of \code{(vec1, len2)} 
    and \code{(vec2, len2)}.

void _fmpz_vec_sub(fmpz * res, const fmpz * vec1, 
				               const fmpz * vec2, long len2)

    Sets \code{(res, len2)} to \code{(vec1, len2)} minus \code{(vec2, len2)}.

*******************************************************************************

    Scalar multiplication and division

*******************************************************************************

void _fmpz_vec_scalar_mul_fmpz(fmpz * vec1, 
                                  const fmpz * vec2, long len2, const fmpz_t x)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} multiplied by $c$, 
    where $c$ is an \code{fmpz_t}.

void _fmpz_vec_scalar_mul_si(fmpz * vec1, const fmpz * vec2, long len2, long c)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} multiplied by $c$, 
    where $c$ is a \code{signed long}.

void _fmpz_vec_scalar_mul_ui(fmpz * vec1,
                                         const fmpz * vec2, long len2, ulong c)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} multiplied by $c$, 
    where $c$ is an \code{unsigned long}.

void _fmpz_vec_scalar_mul_2exp(fmpz * vec1, 
                                       const fmpz * vec2, long len2, ulong exp)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} multiplied by \code{2^exp}.

void _fmpz_vec_scalar_divexact_fmpz(fmpz * vec1, 
                                  const fmpz * vec2, long len2, const fmpz_t x)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} divided by $x$, where the 
    division is assumed to be exact for every entry in \code{vec2}.

void _fmpz_vec_scalar_divexact_si(fmpz * vec1, 
                                          const fmpz * vec2, long len2, long c)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} divided by $x$, where the 
    division is assumed to be exact for every entry in \code{vec2}.

void _fmpz_vec_scalar_divexact_ui(fmpz * vec1, 
                                        const fmpz * vec2, ulong len2, ulong c)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} divided by $x$, where the 
    division is assumed to be exact for every entry in \code{vec2}.

void _fmpz_vec_scalar_fdiv_q_fmpz(fmpz * vec1, 
                                  const fmpz * vec2, long len2, const fmpz_t c)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} divided by $c$, rounding 
    down towards minus infinity whenever the division is not exact.

void _fmpz_vec_scalar_fdiv_q_si(fmpz * vec1, 
                                          const fmpz * vec2, long len2, long c)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} divided by $c$, rounding 
    down towards minus infinity whenever the division is not exact.

void _fmpz_vec_scalar_fdiv_q_ui(fmpz * vec1, 
                                         const fmpz * vec2, long len2, ulong c)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} divided by $c$, rounding 
    down towards minus infinity whenever the division is not exact.

void _fmpz_vec_scalar_fdiv_q_2exp(fmpz * vec1, 
                                       const fmpz * vec2, long len2, ulong exp)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} divided by \code{2^exp}, 
    rounding down towards minus infinity whenever the division is not exact.

void _fmpz_vec_scalar_tdiv_q_fmpz(fmpz * vec1, 
                                  const fmpz * vec2, long len2, const fmpz_t c)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} divided by $c$, rounding 
    down towards minus infinity whenever the division is not exact.

void _fmpz_vec_scalar_tdiv_q_si(fmpz * vec1, 
                                          const fmpz * vec2, long len2, long c)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} divided by $c$, rounding 
    down towards minus infinity whenever the division is not exact.

void _fmpz_vec_scalar_tdiv_q_ui(fmpz * vec1, 
                                         const fmpz * vec2, long len2, ulong c)

    Sets \code{(vec1, len2)} to \code{(vec2, len2)} divided by $c$, rounding 
    down towards minus infinity whenever the division is not exact.

void _fmpz_vec_scalar_addmul_fmpz(fmpz * vec1, 
                                  const fmpz * vec2, long len2, const fmpz_t c)

    Adds \code{(vec2, len2)} times $c$ to \code{(vec1, len2)}, where $c$ is a 
    \code{fmpz_t}.

void _fmpz_vec_scalar_addmul_si(fmpz * vec1, 
                                          const fmpz * vec2, long len2, long c)

    Adds \code{(vec2, len2)} times $c$ to \code{(vec1, len2)}, where $c$ is a 
    \code{signed long}.

void _fmpz_vec_scalar_addmul_si_2exp(fmpz * vec1, 
                               const fmpz * vec2, long len2, long c, ulong exp)

    Adds \code{(vec2, len2)} times \code{c * 2^exp} to \code{(vec1, len2)}, 
    where $c$ is a \code{signed long}.

void _fmpz_vec_scalar_submul_fmpz(fmpz * vec1, 
                                  const fmpz * vec2, long len2, const fmpz_t x)

    Subtracts \code{(vec2, len2)} times $c$ from \code{(vec1, len2)}, 
    where $c$ is a \code{fmpz_t}.

void _fmpz_vec_scalar_submul_si(fmpz * vec1, 
                                          const fmpz * vec2, long len2, long c)

    Subtracts \code{(vec2, len2)} times $c$ from \code{(vec1, len2)}, 
    where $c$ is a \code{signed long}.

void _fmpz_vec_scalar_submul_si_2exp(fmpz * vec1, 
                               const fmpz * vec2, long len2, long c, ulong exp)

    Subtracts \code{(vec2, len2)} times \code{c * 2^exp} 
    from \code{(vec1, len2)}, where $c$ is a \code{signed long}.

*******************************************************************************

    Gaussian content

*******************************************************************************

void _fmpz_vec_content(fmpz_t res, const fmpz * vec, long len)

    Sets \code{res} to the non-negative content of the entries in \code{vec}.  
    The content of a length zero vector is defined to be zero.

