/*=============================================================================

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Copyright (C) 2010 William Hart

******************************************************************************/

*******************************************************************************

    Memory management

*******************************************************************************

mp_ptr nmod_vec_init(long len)

    Returns a vector of the given length. The entries are not necessarily
    zero.

void nmod_vec_free(mp_ptr vec)

    Frees the memory used by the given vector.

*******************************************************************************

    Modular reduction

*******************************************************************************

void nmod_init(nmod_t * mod, mp_limb_t n)

    Initialises the given nmod_t structure for reduction modulo n
    with a precomputed inverse.

NMOD_RED2(r, a_hi, a_lo, mod)

    Macro to set r to (a_hi, a_lo) % mod.n. The mod parameter must be
    a valid nmod_t structure. It is assumed that a_hi is already 
    reduced modulo mod.n.

NMOD_RED(r, a, mod)

    Macro to set r to a % mod.n. The mod parameter must be a valid 
    nmod_t structure.


NMOD2_RED2(r, a_hi, a_lo, mod) 
 
    Macro to set r to (a_hi, a_lo) % mod.n. The mod parameter must be
    a valid nmod_t structure. No assumptions are made about a_hi.


NMOD_RED3(r, a_hi, a_me, a_lo, mod)

    Macro to set r to (a_hi, a_me, a_lo) % mod.n. The mod parameter must 
    be a valid nmod_t structure. It is assumed that a_hi is already 
    reduced modulo mod.n.
 
NMOD_ADDMUL(r, a, b, mod)

    Macro to set r to (r + a*b) % mod.n. The mod parameter must 
    be a valid nmod_t structure. It is assumed that r, a, b are already 
    reduced modulo mod.n.

mp_limb_t _nmod_add(mp_limb_t a, mp_limb_t b, nmod_t mod)

    Returns (a + b) modulo mod.n. It is assumed that mod is no more than 
    FLINT_BITS - 1 bits. It is assumed that a and b are already reduced
    modulo mod.n.

mp_limb_t nmod_add(mp_limb_t a, mp_limb_t b, nmod_t mod)

    Returns (a + b) modulo mod.n. No assumptions are made about mod.n.
    It is assumed that a and b are already reduced modulo mod.n.

mp_limb_t _nmod_sub(mp_limb_t a, mp_limb_t b, nmod_t mod)

    Returns (a - b) modulo mod.n. It is assumed that mod is no more than 
    FLINT_BITS - 1 bits. It is assumed that a and b are already reduced
    modulo mod.n.

mp_limb_t nmod_sub(mp_limb_t a, mp_limb_t b, nmod_t mod)

    Returns (a - b) modulo mod.n. No assumptions are made about mod.n.
    It is assumed that a and b are already reduced modulo mod.n.

mp_limb_t nmod_neg(mp_limb_t a, nmod_t mod)

    Returns -a modulo mod.n. It is assumed that a is already reduced 
    modulo mod.n, but no assumptions are made about the latter.

*******************************************************************************

    Random functions

*******************************************************************************

void _nmod_vec_randtest(mp_ptr vec, long len, nmod_t mod);

*******************************************************************************

    Basic manipulation and comparison

*******************************************************************************

void _nmod_vec_zero(mp_ptr vec, long len)

    Zeros the given vector of the given length.

void _nmod_vec_copy(mp_ptr res, mp_srcptr vec, long len)

    Copies len entries from the vector vec to res.

int _nmod_vec_equal(mp_ptr vec, mp_srcptr vec2, long len)

    Return 1 if {vec, len} == {vec2, len}, else return 0.

void _nmod_vec_reduce(mp_ptr res, mp_srcptr vec, long len, nmod_t mod)

    Reduce the entries of {vec, len} modulo mod.n and set res to the
    result.

mp_bitcnt_t _nmod_vec_max_bits(mp_srcptr vec, long len)

    Return the maximum number of bits of any entry in the vector.

*******************************************************************************

    Arithmetic operations

*******************************************************************************

void _nmod_vec_add(mp_ptr res, mp_srcptr vec1, 
				     mp_srcptr vec2, long len, nmod_t mod)

   Set {res, len} = {vec1, len} + {vec2, len}.

void _nmod_vec_sub(mp_ptr res, mp_srcptr vec1, 
				     mp_srcptr vec2, long len, nmod_t mod)

   Set {res, len} = {vec1, len} - {vec2, len}.

void _nmod_vec_neg(mp_ptr res, mp_srcptr vec, long len, nmod_t mod)

   Set {res, len} = - {vec, len}.

void _nmod_vec_scalar_mul(mp_ptr res, mp_srcptr vec, 
				        long len, nmod_t mod, mp_limb_t c)

   Set { res, len } = {vec, len} * c.

void _nmod_vec_scalar_addmul(mp_ptr res, mp_srcptr vec, 
				        long len, nmod_t mod, mp_limb_t c)

   Set {res, len} = {res, len} + {vec, len} * c.

