/*=============================================================================

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Copyright (C) 2011 Sebastian Pancratz

******************************************************************************/

*******************************************************************************

    Data structures

*******************************************************************************

fmpz * padic_unit(const padic_t op)

    Returns the unit part of the $p$-adic number as a FLINT integer, which 
    can be used as an operand for the \code{fmpz} functions.

    Note that this function is implemented as a macro.

long padic_val(const padic_t op)

    Returns the valuation part of the $p$-adic number.

    Note that this function is implemented as a macro and that 
    the expression \code{padic_val(op)} can be used as both an 
    \emph{lvalue} and an \emph{rvalue}.

*******************************************************************************

    Context

    At the bare minimum, a context object for $p$-adic arithmetic 
    contains the prime number $p$, the precision $N$ and the 
    printing mode.

    In addition, various other useful objects may be stored in 
    the context, such as a pre-computed \code{double} inverse 
    of the prime $p$ or various powers of $p$ near $p^N$.

*******************************************************************************

void padic_ctx_init(padic_ctx_t ctx, const fmpz_t p, long N, 
                    enum padic_print_mode mode)

    Initialises the context \code{ctx} with prime $p$, precision $N$, and 
    printing mode.

    Assumes that $p$ is a prime and that printing mode is one of 
    \code{PADIC_TERSE}, \code{PADIC_SERIES}, or \code{PADIC_VAL_UNIT}.

void padic_ctx_clear(padic_ctx_t ctx);

    Clears all memory that has been allocated as part of the context.

void _padic_ctx_pow_ui(fmpz *rop, int *alloc, ulong e, const padic_ctx_t ctx)

    Sets \code{*rop} to $p^e$ as efficiently as possible.  If \code{*alloc} 
    is set to a non-zero value on return then it is the responsibility of 
    the caller to clear the returned integer.

    N.B.  Expects \code{rop} to be an uninitialised \code{fmpz_t}.

*******************************************************************************

    Memory management

*******************************************************************************

void padic_init(padic_t rop, const padic_ctx_t ctx)

    Initialises the $p$-adic number \code{rop}.

void padic_clear(padic_t rop, const padic_ctx_t ctx)

    Clears all memory used by the $p$-adic number \code{rop}.

void _padic_canonicalise(padic_t rop, const padic_ctx_t ctx)

    Brings the $p$-adic number \code{rop} into canonical form.

    That is to say, ensures that either $u = v = 0$ or 
    $p \nmid u$.  This operation does not reduce the 
    precision of the number.

void _padic_reduce(padic_t rop, const padic_ctx_t ctx)

    Given a $p$-adic number \code{rop} in canonical form, 
    reduces it modulo $p^N$.

void padic_reduce(padic_t rop, const padic_ctx_t ctx)

    Ensures that the $p$-adic number \code{rop} is reduced 
    with respect to the given context.

    That is to say, ensures that $v < N$, and that $0 \leq u < p^{N - v}$, 
    and that $u$, if non-zero, is not divisible by $p$.  If $v \geq N$, 
    sets $u = 0$, $v = 0$.  If $u = 0$, sets $v = 0$.  Thus, the unique 
    value of zero is $(u, v) = (0, 0)$.

*******************************************************************************

    Randomisation

*******************************************************************************

void padic_randtest(padic_t rop, flint_rand_t state, const padic_ctx_t ctx)

    Sets \code{rop} to a random $p$-adic number modulo $p^N$ with valuation 
    in the range $[- \ceil{N/10}, N)$, $[N - \ceil{-N/10}, N)$, or $[-10, 0)$ 
    as $N$ is positive, negative or zero.

void padic_randtest_not_zero(padic_t rop, flint_rand_t state, 
                             const padic_ctx_t ctx)

    Sets \code{rop} to a random non-zero $p$-adic number modulo $p^N$, 
    where the range of the valuation is as for the function 
    \code{padic_randtest()}.

*******************************************************************************

    Assignment

*******************************************************************************

void _padic_set(padic_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets \code{rop} to a copy of \code{op}.

    N.B.  No reduction takes place.

void padic_set(padic_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets \code{rop} to the value of \code{op} reduced modulo $p^N$.

void _padic_set_si(padic_t rop, long op, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to the 
    \code{long} integer \code{op}.

void padic_set_si(padic_t rop, long op, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to the 
    \code{long} integer \code{op} reduced modulo $p^N$.

void _padic_set_ui(padic_t rop, ulong op, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to the \code{unsigned long} 
    integer \code{op}.

void padic_set_ui(padic_t rop, ulong op, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to the \code{unsigned long} 
    integer \code{op} reduced modulo $p^N$.

void _padic_set_fmpz(padic_t rop, const fmpz_t op, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to the integer \code{op}.

void padic_set_fmpz(padic_t rop, const fmpz_t op, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to the integer \code{op} 
    reduced modulo $p^N$.

void padic_set_fmpq(padic_t rop, const fmpq_t op, const padic_ctx_t ctx)

    Sets \code{rop} to the rational \code{op} reduced 
    modulo $p^N$.

void _padic_set_mpz(padic_t rop, const mpz_t op, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to the MPIR integer \code{op}.

    The unit part is reduced modulo $p^N$ if and only if \code{op} 
    is negative.

void padic_set_mpz(padic_t rop, const mpz_t op, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to the MPIR integer \code{op} 
    reduced modulo $p^N$.

void padic_set_mpq(padic_t rop, const mpq_t op, const padic_ctx_t ctx)

    Sets \code{rop} to the MPIR rational \code{op} reduced 
    modulo $p^N$.

void _padic_get_fmpz(fmpz_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets the integer \code{rop} to the $p$-adic integer \code{op}.

    If \code{op} is not a $p$-adic integer, sets \code{rop} to zero.

    N.B.  No reduction takes place.

void padic_get_fmpz(fmpz_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets the integer \code{rop} to the $p$-adic integer \code{op} 
    reduced modulo $p^N$.

    If \code{op} is not a $p$-adic integer, sets \code{rop} to zero.

void _padic_get_fmpq(fmpq_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets the rational \code{rop} to the $p$-adic integer \code{op}.

    N.B.  No reduction takes place.

void padic_get_fmpq(fmpq_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets the rational \code{rop} to the $p$-adic integer \code{op} 
    reduced modulo $p^N$.

void _padic_get_mpz(mpz_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets the MPIR integer \code{rop} to the $p$-adic integer \code{op}.

    If \code{op} is not a $p$-adic integer, sets \code{rop} to zero.

    N.B.  No reduction takes place.

void padic_get_mpz(mpz_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets the MPIR integer \code{rop} to the $p$-adic integer \code{op}, 
    reduced modulo $p^N$.

    If \code{op} is not a $p$-adic integer, sets \code{rop} to zero.

void _padic_get_mpq(mpq_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets the MPIR rational \code{rop} to the value of \code{op}.
    
    N.B.  No reduction takes place.

void padic_get_mpq(mpq_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets the MPIR rational \code{rop} to the value of \code{op}, 
    reduced modulo $p^N$.
    
void padic_swap(padic_t op1, padic_t op2, const padic_ctx_t ctx)

    Swaps the two $p$-adic numbers \code{op1} and \code{op2}.

    N.B.  No reduction takes place.

void _padic_zero(padic_t rop)

    Sets the $p$-adic number \code{rop} to zero.

void padic_zero(padic_t rop, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to zero.

void _padic_one(padic_t rop)

    Sets the $p$-adic number \code{rop} to one.

void padic_one(padic_t rop, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to one, reduced modulo $p^N$.

*******************************************************************************

    Arithmetic operations

*******************************************************************************

void _padic_add(padic_t rop, const padic_t op1, const padic_t op2, 
                const padic_ctx_t ctx)

    Sets \code{rop} to the sum of \code{op1} and \code{op2}.

void padic_add(padic_t rop, const padic_t op1, const padic_t op2, 
               const padic_ctx_t ctx)

    Sets \code{rop} to the sum of \code{op1} and \code{op2}, 
    reduced modulo $p^N$.

void _padic_sub(padic_t rop, const padic_t op1, const padic_t op2, 
                const padic_ctx_t ctx)

    Sets \code{rop} to the difference of \code{op1} and \code{op2}.

void padic_sub(padic_t rop, const padic_t op1, const padic_t op2, 
               const padic_ctx_t ctx)

    Sets \code{rop} to the difference of \code{op1} and \code{op2}, 
    reduced modulo $p^N$.

void _padic_neg(padic_t rop, const padic_t op)

    Sets \code{rop} to the additive inverse of \code{op}.

void padic_neg(padic_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets \code{rop} to the additive inverse of \code{op}, 
    reduced  modulo $p^N$.

void _padic_mul(padic_t rop, const padic_t op1, const padic_t op2)

    Sets \code{rop} to the product of \code{op1} and \code{op2}.

void padic_mul(padic_t rop, const padic_t op1, const padic_t op2, 
               const padic_ctx_t ctx)

    Sets \code{rop} to the product of \code{op1} and \code{op2}, 
    reduced modulo $p^N$.

void padic_shift(padic_t rop, const padic_t op, long v, const padic_ctx_t ctx)

    Sets \code{rop} to the product of \code{op} and $p^v$, 
    reduced modulo $p^N$.

void padic_div(padic_t rop, const padic_t op1, const padic_t op2, 
               const padic_ctx_t ctx)

    Sets \code{rop} to the quotient of \code{op1} and \code{op2}, 
    reduced modulo $p^N$.

void _padic_inv(fmpz_t rop, const fmpz_t op, const fmpz_t p, long N)

    Sets \code{rop} to the inverse of \code{op} modulo $p^N$, 
    assuming that \code{op} is a unit and $N \geq 1$.

    In the current implementation, allows aliasing, but this might 
    change in future versions.

void padic_inv(padic_t rop, const padic_t op, const padic_ctx_t ctx)

    Computes the inverse of \code{op} modulo $p^N$.

    Suppose that \code{op} is given as $x = u p^v$. 
    Raises an \code{abort} signal if $v < -N$.  Otherwise, 
    computes the inverse of $u$ modulo $p^{N+v}$.

void _padic_inv_naive(fmpz_t rop, const fmpz_t op, const fmpz_t p, long N)

    Sets \code{rop} to the inverse of \code{op} modulo $p^N$, 
    assuming that \code{op} is a unit and $N \geq 1$.

    In the current implementation, allows aliasing, but this might 
    change in future versions.

void padic_inv_naive(padic_t rop, const padic_t op, const padic_ctx_t ctx)

    Computes the inverse of \code{op} modulo $p^N$.

    This function naively refers to the function \code{fmpz_invmod},
    which works for any ring $\mathbf{Z} / m \mathbf{Z}$.

void _padic_inv_hensel(fmpz_t rop, const fmpz_t op, const fmpz_t p, long N)

    Sets \code{rop} to the inverse of \code{op} modulo $p^N$, 
    assuming that \code{op} is a unit and $N \geq 1$.

    In the current implementation, allows aliasing, but this might 
    change in future versions.

void padic_inv_hensel(padic_t rop, const padic_t op, const padic_ctx_t ctx)

    Computes the inverse of \code{op} modulo $p^N$.

    This function employs Hensel lifting of an inverse modulo $p$.

int padic_sqrt(padic_rop, const padic_t op, const padic_ctx_t ctx)

    Returns whether \code{op} is a $p$-adic square.  If this is 
    the case, sets \code{rop} to one of the square roots;  otherwise, 
    the value of \code{rop} is undefined.

    We have the following theorem:

    Let $u \in \mathbf{Z}^{\times}$.  Then $u$ is a 
    square if and only if $u \bmod p$ is a square in 
    $\mathbf{Z} / p \mathbf{Z}$, for $p > 2$, or if 
    $u \bmod 8$ is a square in $\mathbf{Z} / 8 \mathbf{Z}$, 
    for $p = 2$.

void padic_pow_si(padic_t rop, const padic_t op, long e, 
                  const padic_ctx_t ctx)

    Sets \code{rop} to \code{op} raised to the power $e$.

    Assumes that some computations involving $e$ and the 
    valuation of \code{op} do not overflow in the \code{long} 
    range.

*******************************************************************************

    Comparison

*******************************************************************************

int _padic_is_zero(const padic_t op, const padic_ctx_t ctx)

    Returns whether \code{op} is zero.

int padic_is_zero(const padic_t op, const padic_ctx_t ctx)

    Returns whether \code{op} is zero modulo $p^N$.

int _padic_is_one(const padic_t op)

    Returns whether \code{op} is one.

int padic_is_one(const padic_t op, const padic_ctx_t ctx)

    Returns whether \code{op} is one modulo $p^N$.

int _padic_equal(const padic_t op1, const padic_t op2)

    Returns whether \code{op1} and \code{op2} are equal.

int padic_equal(const padic_t op1, const padic_t op2, const padic_ctx_t ctx)

    Returns whether \code{op1} and \code{op2} are equal modulo $p^N$.

*******************************************************************************

    Special functions

*******************************************************************************

void padic_teichmuller(padic_t rop, const padic_t op, const padic_ctx_t ctx)

    Computes the Teichmuller lift of the $p$-adic unit \code{op}.

    If \code{op} is a $p$-adic integer divisible by $p$, sets \code{rop} 
    to zero, which satisfies $t^p - t = 0$, although it is clearly not 
    a $(p-1)$-st root of unity.

    If \code{op} has negative valuation, raises an abort signal.

int padic_exp(padic_t rop, const padic_t op, const padic_ctx_t ctx)

    Returns whether the $p$-adic exponential function converges at 
    the $p$-adic number \code{op}, and if so sets \code{rop} to its 
    value.

    The $p$-adic exponential function is defined by the usual series 
    \begin{equation*}
    \exp_p(x) = \sum_{i = 0}^{\infty} \frac{x^i}{i!}
    \end{equation*}
    but this only converges only when $\ord_p(x) > 1 / (p - 1)$.  For 
    elements $x \in \mathbf{Q}_p$, this means that $\ord_p(x) \geq 1$ 
    when $p \geq 3$ and $\ord_2(x) \geq 2$ when $p = 2$.

void padic_val_fac(fmpz_t rop, const fmpz_t n, const fmpz_t p)

    Computes the $p$-adic valuation of $n!$, assuming that $n > 0$.

*******************************************************************************

    Input and output

*******************************************************************************

char * padic_get_str(const padic_t op, const padic_ctx_t ctx)

    Returns the string representation of the $p$-adic number \code{op}, 
    according to the printing mode set in the context.

int padic_fprint(FILE * file, const padic_t op, const padic_ctx_t ctx)

    Prints the string representation of the $p$-adic number \code{op} 
    to the stream \code{file}.

    In the current implementation, always returns $1$.

int padic_print(const padic_t op, const padic_ctx_t ctx)

    Prints the string representation of the $p$-adic number \code{op} 
    to the stream \code{stdout}.

    In the current implementation, always returns $1$.

void padic_debug(const padic_t op, const padic_ctx_t ctx)

    Prints debug information about \code{op} to the stream \code{stdout}.

