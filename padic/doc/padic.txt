/*=============================================================================

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Copyright (C) 2011 Sebastian Pancratz

******************************************************************************/

*******************************************************************************

    Context

*******************************************************************************

void padic_ctx_init(padic_ctx_t ctx, const fmpz_t p, long N, 
                    enum padic_print_mode mode)

    Initialises the context \code{ctx} with prime $p$, precision $N$, and 
    printing mode.

    Assumes that $p$ is a prime, that $N \geq 1$, and that printing mode is 
    one of \code{PADIC_TERSE}, \code{PADIC_SERIES}, or \code{PADIC_VAL_UNIT}.

void padic_ctx_clear(padic_ctx_t ctx);

    Clears all memory that has been allocated as part of the context.

*******************************************************************************

    Memory management

*******************************************************************************

void padic_init(padic_t rop, const padic_ctx_t ctx)

    Initialises the $p$-adic number \code{rop}.

void padic_clear(padic_t rop, const padic_ctx_t ctx)

    Clears all memory used by the $p$-adic number \code{rop}.

void padic_normalise(padic_t rop, const padic_ctx_t ctx)

    Ensures that $v < N$, and that $0 \leq u < p^{N - v}$, 
    and that $u$, if non-zero, is not divisible by $p$.

    If $v \geq N$, sets $u = 0$, $v = 0$.  If $u = 0$, sets 
    $v = 0$.  Thus, the unique value of zero is $(u, v) = (0, 0)$.

void _padic_reduce_unit(padic_t rop, const padic_ctx_t ctx)

    Given a padic number $x = u p^v$ modulo $p^N$, where $u$ is a $p$-adic 
    unit not necessarily contained in the range $[1, p^{N - v})$, sets $u$ 
    to the unique representative in this range.

    Asserts that $v < N$.

*******************************************************************************

    Randomisation

*******************************************************************************

void padic_randtest(padic_t rop, flint_rand_t state, const padic_ctx_t ctx)

    Sets \code{rop} to a random $p$-adic number modulo $p^N$ with valuation 
    in the range $[- N / 10, N)$, or zero.

void padic_randtest_not_zero(padic_t rop, flint_rand_t state, 
                             const padic_ctx_t ctx)

    Sets \code{rop} to a random non-zero $p$-adic number modulo $p^N$.

*******************************************************************************

    Assignment

*******************************************************************************

void padic_set(padic_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets \code{rop} to a copy of \code{op}.

void padic_set_si(padic_t rop, long op, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to the \code{long} integer \code{op}.

void padic_set_ui(padic_t rop, ulong op, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to the \code{unsigned long} 
    integer \code{op}.

void padic_set_fmpz(padic_t rop, const fmpz_t op, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to the integer \code{op}.

void padic_swap(padic_t op1, padic_t op2, const padic_ctx_t ctx)

    Swaps the two $p$-adic numbers \code{op1} and \code{op2}.

void padic_zero(padic_t rop, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to zero.

void padic_one(padic_t rop, const padic_ctx_t ctx)

    Sets the $p$-adic number \code{rop} to one.

*******************************************************************************

    Arithmetic operations

*******************************************************************************

void padic_add(padic_t rop, const padic_t op1, const padic_t op2, 
               const padic_ctx_t ctx)

    Sets \code{rop} to the sum of \code{op1} and \code{op2}.

    This operation is exact modulo $p^N$.

void padic_sub(padic_t rop, const padic_t op1, const padic_t op2, 
               const padic_ctx_t ctx)

    Sets \code{rop} to the difference of \code{op1} and \code{op2}.

    This operation is exact modulo $p^N$.

void padic_neg(padic_t rop, const padic_t op, const padic_ctx_t ctx)

    Sets \code{rop} to the additive inverse of \code{op} 
    modulo $p^N$.

    This operation is exact modulo $p^N$.

void padic_mul(padic_t rop, const padic_t op1, const padic_t op2, 
               const padic_ctx_t ctx)

    Sets \code{rop} to the product of \code{op1} and 
    \code{op2} modulo $p^N$.

void padic_div(padic_t rop, const padic_t op1, const padic_t op2, 
               const padic_ctx_t ctx)

    Sets \code{rop} to the quotient of \code{op1} and \code{op2}.

void padic_inv(padic_t rop, const padic_t op, const padic_ctx_t ctx)

    Computes the inverse of \code{op}.

    We compute the inverse of $x = u p^{v}$ modulo $p^N$ as 
    $x^{-1} = u^{-1} p^{-v}$ with $u^{-1}$ reduced modulo 
    $p^{v + N}$, where for units $u$ we compute the 
    inverse as follows:

    If $v \geq 0$ then invert $u$ modulo $p^{N + v}$. 
    Otherwise, if $v < 0$, first reduce $u$ modulo $p^{N + v}$ 
    and then invert this.

void padic_pow_si(padic_t rop, const padic_t op, long e, 
                  const padic_ctx_t ctx)

    Sets \code{rop} to \code{op} raised to the power $e$.

*******************************************************************************

    Comparison

*******************************************************************************

int padic_is_zero(const padic_t op, const padic_ctx_t ctx)

    Returns whether \code{op} is zero modulo $p^N$.

int padic_is_one(const padic_t op, const padic_ctx_t ctx)

    Returns whether \code{op} is one modulo $p^N$.

int padic_equal(const padic_t op1, const padic_t op2, const padic_ctx_t ctx)

    Returns whether \code{op1} and \code{op2} are equal modulo $p^N$.

*******************************************************************************

    Input and output

*******************************************************************************

char * padic_get_str(const padic_t op, const padic_ctx_t ctx)

    Returns the string representation of the $p$-adic number \code{op}, 
    according to the printing mode set in the context.

int padic_set_str(padic_t rop, const char *str, const padic_ctx_t ctx)

    TODO.

int padic_fprint(FILE * file, const padic_t op, const padic_ctx_t ctx)

    Prints the string representation of the $p$-adic number \code{op} 
    to the stream \code{file}.

    In the current implementation, always returns $1$.

int padic_print(const padic_t op, const padic_ctx_t ctx)

    Prints the string representation of the $p$-adic number \code{op} 
    to the stream \code{stdout}.

    In the current implementation, always returns $1$.

void padic_debug(const padic_t op, const padic_ctx_t ctx)

    Prints debug information about \code{op} to the stream \code{stdout}.

