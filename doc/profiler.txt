
timeit_start() and timeit_stop()

   Gives wall and user time - useful for parallel programming

   Example usage:

   timeit_t t0;

   ///....

   timeit_start(t0);

   /// do stuff, take some time

   timeit_stop(t0);

   printf("cpu = %ld ms  wall = %ld ms\n", t0->cpu, t0->wall);

start_clock() stop_clock() get_clock()

   Gives time based on cycle counter

   First one must ensure the processor speed in cycles per second
   is set correctly in profiler.h, in the #define FLINT_CLOCKSPEED.

   One can access the cycle counter directly by get_cycle_counter()
   which returns the current cycle counter as a double.

   A sample usage of clocks is:

   init_all_clocks();
   
   start_clock(n);

   // do something

   stop_clock(n);

   printf("Time in seconds is %f.3\n", get_clock(n));  

   where n is a clock number (from 0-19 by default). The number of clocks
   can be changed by altering FLINT_NUM_CLOCKS. One can also initialise
   an individual clock with init_clock(n).

prof_repeat()
  
   Allows one to automatically time a given function. Here is a sample usage:

   Suppose one has a function one wishes to profile:

   void myfunc(ulong a, ulong b);

   One creates a struct for passing arguments to our function:

   typedef struct 
   {
      ulong a, b;
   } myfunc_t;

   ... a sample function:

   void sample_myfunc(void * arg, ulong count)
   {
      myfunc_t * params = (myfunc_t *) arg;

      ulong a = arg->a;
      ulong b = arg->b;

      for (ulong i = 0; i < count; i++)
      {
         prof_start();
         myfunc(a, b);
         prof_stop();
      }
   }

   ... then we do the profile

   double min, max;

   myfunc_t params;

   params.a = 3;
   params.b = 4;

   prof_repeat(&min, &max, sample_myfunc, &params);
   
   printf("Min time is %lf.3s, max time is %lf.3s\n", min, max);

   If either of the first two parameters to prof_repeat are NULL, that
   value is not stored.

   One may set the minimum time in microseconds for a timing run by 
   adjusting DURATION_THRESHOLD and one may set a target duration in
   microseconds by adjusting DURATION_TARGET in profiler.h.
   
