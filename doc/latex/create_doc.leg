# Minimal grammar for our documentation files. To compile, run
# > leg create_doc.leg -o create_doc_gen.c

start = group*

group = comments groupopening comments (EOL|function|subgroupopening)*


groupopening = stars blankline sectiontitle blankline content stars
subgroupopening = pluses blankline? subsectiontitle blankline? content pluses

sectiontitle = "    " < linecontent > EOL     {
    flint_fprintf(out, "\\section{%.*s}\n", yyleng, yytext);}

subsectiontitle = "    " < linecontent > EOL     {
    flint_fprintf(out, "\\subsection{%.*s}\n", yyleng, yytext);}

function = (macroheader|functionheader) functionfooter? EOL*

functionheader = < funcnametype '(' funcargs ')' modifiers? ';'?
                      > whitespace? EOL {flint_printfuncheader(yytext, yyleng);}

macroheader = < 'macro' whitespace linecontent > EOL    {
    flint_printfuncheader(yytext, yyleng);}

funcnametype = !('*'|'+') ('operator()' | (! '(' .))*
funcargs = (! ')' .)*
modifiers = whitespace? ("const" | "(macro)")

functionfooter = content


content = < (contentline | blankline)* >       {
    flint_fprintf(out, "%.*s", yyleng, yytext);}

contentline = "    " linecontent EOL

linecontent = (! EOL .) *

comments = (whitespace | EOL | comment)*

comment = '/*' (! "*/" .)* '*/'

blankline = whitespace? EOL

stars = "*******************************************************************************" EOL
pluses = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" EOL
EOL = ('\r\n' | '\n' | '\r')
whitespace = (' ' | '\t')+
