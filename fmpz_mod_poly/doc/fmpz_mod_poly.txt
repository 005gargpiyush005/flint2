/*=============================================================================

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Copyright (C) 2009, 2008 William Hart
    Copyright (C) 2011 Sebastian Pancratz
    Copyright (C) 2011 Fredrik Johansson

******************************************************************************/

*******************************************************************************

    Memory management

*******************************************************************************

void fmpz_mod_poly_init(fmpz_mod_poly_t poly, const fmpz_t p)

    Initialises \code{poly} for use over $\mathbf{Z} / p \mathbf{Z}$, 
    setting its length to zero.

    A corresponding call to \code{fmpz_mod_poly_clear()} must be made after 
    finishing with the \code{fmpz_mod_poly_t} to free the memory used by 
    the polynomial.  The user is also responsible to clearing the 
    integer~$p$.

void fmpz_mod_poly_init2(fmpz_mod_poly_t poly, const fmpz_t p, long alloc)

    Initialises \code{poly} with space for at least \code{alloc} coefficients 
    and sets the length to zero.  The allocated coefficients are all set to 
    zero.

void fmpz_mod_poly_clear(fmpz_mod_poly_t poly)

    Clears the given polynomial, releasing any memory used.  It must 
    be reinitialised in order to be used again.

void fmpz_mod_poly_realloc(fmpz_mod_poly_t poly, long alloc)

    Reallocates the given polynomial to have space for \code{alloc} 
    coefficients.  If \code{alloc} is zero the polynomial is cleared 
    and then reinitialised.  If the current length is greater than 
    \code{alloc} the polynomial is first truncated to length \code{alloc}.

void fmpz_mod_poly_fit_length(fmpz_mod_poly_t poly, long len)

    If \code{len} is greater than the number of coefficients currently 
    allocated, then the polynomial is reallocated to have space for at 
    least \code{len} coefficients.  No data is lost when calling this 
    function.

    The function efficiently deals with the case where it is called 
    many times in small increments by at least doubling the number of 
    allocated coefficients when length is larger than the number of 
    coefficients currently allocated.

void _fmpz_mod_poly_normalise(fmpz_mod_poly_t poly)

    Sets the length of \code{poly} so that the top coefficient is non-zero. 
    If all coefficients are zero, the length is set to zero.  This function 
    is mainly used internally, as all functions guarantee normalisation.

void _fmpz_mod_poly_set_length(fmpz_mod_poly_t poly, long len)

    Demotes the coefficients of \code{poly} beyond \code{len} and sets 
    the length of \code{poly} to \code{len}.

void fmpz_mod_poly_truncate(fmpz_mod_poly_t poly, long len)

    If the current length of \code{poly} is greater than \code{len}, it 
    is truncated to have the given length.  Discarded coefficients are 
    not necessarily set to zero.

*******************************************************************************

    Randomisation

*******************************************************************************

void fmpz_mod_poly_randtest(fmpz_mod_poly_t f, flint_rand_t state, long len)

    Sets the polynomial~$f$ to a random polynomial of length up~\code{len}.

void fmpz_mod_poly_randtest_not_zero(fmpz_mod_poly_t f, 
                                     flint_rand_t state, long len)

    Sets the polynomial~$f$ to a random polynomial of length up~\code{len}, 
    assuming \code{len} is positive.

*******************************************************************************

    Attributes

*******************************************************************************

long fmpz_mod_poly_degree(const fmpz_mod_poly_t poly)

    Returns the degree of the polynomial.  The degree of the zero 
    polynomial is defined to be $-1$.

long fmpz_mod_poly_length(const fmpz_mod_poly_t poly)

    Returns the length of the polynomial, which is one more than 
    its degree.

fmpz * fmpz_mod_poly(const fmpz_mod_poly_t poly)

    Returns a pointer to the first leading coefficient of \code{poly} 
    if this is non-zero, otherwise returns \code{NULL}.

*******************************************************************************

    Assignment and swap

*******************************************************************************

void fmpz_mod_poly_set(fmpz_mod_poly_t poly1, const fmpz_mod_poly_t poly2)

    Sets the polynomial \code{poly1} to the value of \code{poly2}.

void fmpz_mod_poly_swap(fmpz_mod_poly_t poly1, fmpz_mod_poly_t poly2)

    Swaps the two polynomials.  This is done efficiently by swapping 
    pointers rather than individual coefficients.

void fmpz_mod_poly_zero(fmpz_mod_poly_t poly)

    Sets \code{poly} to the zero polynomial.

void fmpz_mod_poly_zero_coeffs(fmpz_mod_poly_t poly, long i, long j)

    Sets the coefficients of $X^k$ for $k \in [i, j)$ in the polynomial 
    to zero.

*******************************************************************************

    Conversion

*******************************************************************************

void fmpz_mod_poly_set_fmpz_poly(fmpz_mod_poly_t f, const fmpz_poly_t g)

    Sets $f$ to $g$ reduced modulo $p$, where $p$ is the modulus that 
    is part of the data structure of $f$.

void fmpz_mod_poly_get_fmpz_poly(fmpz_poly_t f, const fmpz_mod_poly_t g)

    Sets $f$ to $g$.  This is done simply by lifting the coefficients 
    of $g$ taking representatives $[0, p) \subset \mathbf{Z}$.

*******************************************************************************

    Comparison

*******************************************************************************

int fmpz_mod_poly_equal(const fmpz_mod_poly_t poly1, 
                        const fmpz_mod_poly_t poly2)

    Returns non-zero if the two polynomials are equal.

int fmpz_mod_poly_is_zero(const fmpz_mod_poly_t poly)

    Returns non-zero if the polynomial is zero.

*******************************************************************************

    Getting and setting coefficients

*******************************************************************************

void fmpz_mod_poly_set_coeff_fmpz(fmpz_mod_poly_t poly, long n, const fmpz_t x)

    Sets the coefficient of $X^n$ in the polynomial to $x$, 
    assuming $n \geq 0$.

void fmpz_mod_poly_get_coeff_fmpz(fmpz_t x, const fmpz_mod_poly_t poly, long n)

    Sets $x$ to the coefficient of $X^n$ in the polynomial, 
    assumng $n \geq 0$.

*******************************************************************************

    Shifting

*******************************************************************************

void _fmpz_mod_poly_shift_left(fmpz * res, 
                               const fmpz * poly, long len, long n)

    Sets \code{(res, len + n)} to \code{(poly, len)} shifted left by 
    $n$ coefficients.  

    Inserts zero coefficients at the lower end.  Assumes that \code{len} 
    and $n$ are positive, and that \code{res} fits \code{len + n} elements.
    Supports aliasing between \code{res} and \code{poly}.

void fmpz_mod_poly_shift_left(fmpz_mod_poly_t f, 
                              const fmpz_mod_poly_t g, long n)

    Sets \code{res} to \code{poly} shifted left by $n$ coeffs.  Zero 
    coefficients are inserted.

void _fmpz_mod_poly_shift_right(fmpz * res, 
                                const fmpz * poly, long len, long n)

    Sets \code{(res, len - n)} to \code{(poly, len)} shifted right by 
    $n$ coefficients.  

    Assumes that \code{len} and $n$ are positive, that \code{len > n}, 
    and that \code{res} fits \code{len - n} elements.  Supports aliasing 
    between \code{res} and \code{poly}, although in this case the top 
    coefficients of \code{poly} are not set to zero.

void fmpz_mod_poly_shift_right(fmpz_mod_poly_t f, 
                               const fmpz_mod_poly_t g, long n)

    Sets \code{res} to \code{poly} shifted right by $n$ coefficients.  If $n$ 
    is equal to or greater than the current length of \code{poly}, \code{res} 
    is set to the zero polynomial.

*******************************************************************************

    Addition and subtraction

*******************************************************************************

void _fmpz_mod_poly_add(fmpz *res, const fmpz *poly1, long len1, 
                                   const fmpz *poly2, long len2, 
                                   const fmpz_t p)

    Sets \code{res} to the sum of \code{(poly1, len1)} and 
    \code{(poly2, len2)}.  It is assumed that \code{res} has 
    sufficient space for the longer of the two polynomials.

void fmpz_mod_poly_add(fmpz_mod_poly_t res, 
                       const fmpz_mod_poly_t poly1, 
                       const fmpz_mod_poly_t poly2)

    Sets \code{res} to the sum of \code{poly1} and \code{poly2}.

void _fmpz_mod_poly_sub(fmpz *res, const fmpz *poly1, long len1, 
                                   const fmpz *poly2, long len2, 
                                   const fmpz_t p)

    Sets \code{res} to \code{(poly1, len1)} minus \code{(poly2, len2)}.  It 
    is assumed that \code{res} has sufficient space for the longer of the 
    two polynomials.

void fmpz_mod_poly_sub(fmpz_mod_poly_t res, 
                       const fmpz_mod_poly_t poly1, 
                       const fmpz_mod_poly_t poly2)

    Sets \code{res} to \code{poly1} minus \code{poly2}.

void _fmpz_mod_poly_neg(fmpz *res, const fmpz *poly, long len, const fmpz_t p)

    Sets \code{(res, len)} to the negative of \code{(poly, len)} 
    modulo $p$.

void fmpz_mod_poly_neg(fmpz_mod_poly_t res, const fmpz_mod_poly_t poly)

    Sets \code{res} to the negative of \code{poly} modulo $p$.

*******************************************************************************

    Scalar multiplication

*******************************************************************************

void _fmpz_mod_poly_scalar_mul_fmpz(fmpz *res, const fmpz *poly, long len, 
                                    const fmpz_t p, const fmpz_t x)

    Sets \code{(res, len}) to \code{(poly, len)} multiplied by $x$, 
    reduced modulo $p$.

void fmpz_mod_poly_scalar_mul_fmpz(fmpz_mod_poly_t res, 
    const fmpz_mod_poly_t poly, const fmpz_t x)

    Sets \code{res} to \code{poly} multiplied by $x$.

*******************************************************************************

    Multiplication

*******************************************************************************

void _fmpz_mod_poly_mul(fmpz *res, const fmpz *poly1, long len1, 
                                   const fmpz *poly2, long len2, 
                                   const fmpz_t p)

    Sets \code{(res, len1 + len2 - 1)} to the product of \code{(poly1, len1)} 
    and \code{(poly2, len2)}.  Assumes \code{len1 >= len2 > 0}.  Allows 
    zero-padding of the two input polynomials.

void fmpz_mod_poly_mul(fmpz_mod_poly_t res, 
                       const fmpz_mod_poly_t poly1, 
                       const fmpz_mod_poly_t poly2)

    Sets \code{res} to the product of \code{poly1} and \code{poly2}.

void _fmpz_mod_poly_mullow(fmpz *res, const fmpz *poly1, long len1, 
                                      const fmpz *poly2, long len2, 
                                      const fmpz_t p, long n)

    Sets \code{(res, n)} to the lowest $n$ coefficients of the product of 
    \code{(poly1, len1)} and \code{(poly2, len2)}.

    Assumes \code{len1 >= len2 > 0} and \code{0 < n <= len1 + len2 - 1}.  
    Allows for zero-padding in the inputs.  Does not support aliasing between 
    the inputs and the output.

void fmpz_mod_poly_mullow(fmpz_mod_poly_t res, 
    const fmpz_mod_poly_t poly1, const fmpz_mod_poly_t poly2, long n)

    Sets \code{res} to the lowest $n$ coefficients of the product of 
    \code{poly1} and \code{poly2}.

void _fmpz_mod_poly_sqr(fmpz *res, const fmpz *poly, long len, const fmpz_t p)

    Sets \code{res} to the square of \code{poly}.

void fmpz_mod_poly_sqr(fmpz_mod_poly_t res, const fmpz_mod_poly_t poly)

    Computes \code{res} as the square of \code{poly}.

*******************************************************************************

    Powering

*******************************************************************************

void _fmpz_mod_poly_pow(fmpz *rop, const fmpz *op, long len, ulong e, 
                        const fmpz_t p)

    Sets \code{res = poly^e}, assuming that \code{e, len > 0} and that 
    \code{res} has space for \code{e*(len - 1) + 1} coefficients.  Does 
    not support aliasing.

void fmpz_mod_poly_pow(fmpz_mod_poly_t rop, const fmpz_mod_poly_t op, ulong e)

    Computes \code{res = poly^e}.  If $e$ is zero, returns one, 
    so that in particular \code{0^0 = 1}.

*******************************************************************************

    Division

*******************************************************************************

void _fmpz_mod_poly_divrem_basecase(fmpz * Q, fmpz * R, 
    const fmpz * A, long lenA, const fmpz * B, long lenB, 
    const fmpz_t invB, const fmpz_t p)

    Computes \code{(Q, lenA - lenB + 1)}, \code{(R, lenA)} such that 
    $A = B Q + R$ with $0 \leq \len(R) < \len(B)$.

    Assumes that the leading coefficient of $B$ is invertible 
    modulo $p$, and that \code{invB} is the inverse.

    Assumes that $\len(A), \len(B) > 0$.  Allows zero-padding in 
    \code{(A, lenA)}.  $R$ and $A$ may be aliased, but apart from this no 
    aliasing of input and output operands is allowed.

void fmpz_mod_poly_divrem_basecase(fmpz_mod_poly_t Q, fmpz_mod_poly_t R, 
    const fmpz_mod_poly_t A, const fmpz_mod_poly_t B)

    Computes $Q$, $R$ such that $A = B Q + R$ with 
    $0 \leq \len(R) < \len(B)$.

    Assumes that the leading coefficient of $B$ is invertible 
    modulo $p$.

void _fmpz_mod_poly_div_basecase(fmpz * Q, fmpz * R, 
    const fmpz * A, long lenA, const fmpz * B, long lenB, 
    const fmpz_t invB, const fmpz_t p)

    Notationally, computes $Q$, $R$ such that $A = B Q + R$ with 
    $0 \leq \len(R) < \len(B)$ but only sets \code{(Q, lenA - lenB + 1)}.

    Requires temporary space \code{(R, lenA)}.  Allows aliasing 
    only between $A$ and $R$.  Allows zero-padding in $A$ but 
    not in $B$.  Assumes that the leading coefficient of $B$ 
    is a unit modulo $p$.

void fmpz_mod_poly_div_basecase(fmpz_mod_poly_t Q, 
    const fmpz_mod_poly_t A, const fmpz_mod_poly_t B)

    Notationally, computes $Q$, $R$ such that $A = B Q + R$ with 
    $0 \leg \len(R) < \len(B)$ assuming that the leading term 
    of $B$ is a unit.

void _fmpz_mod_poly_divrem_divconquer_recursive(fmpz * Q, fmpz * BQ, fmpz * W,
    const fmpz * A, const fmpz * B, long lenB, 
    const fmpz_t invB, const fmpz_t p)

    Computes \code{(Q, lenB)}, \code{(BQ, 2 lenB - 1)} such that 
    $BQ = B \times Q$ and $A = B Q + R$ where $0 \leq \len(R) < \len(B)$.

    Assumes that the leading coefficient of $B$ is invertible 
    modulo $p$, and that \code{invB} is the inverse.

    Assumes $\len(B) > 0$.  Allows zero-padding in \code{(A, lenA)}.  Requires 
    a temporary array \code{(W, 2 lenB - 1)}.  No aliasing of input and output 
    operands is allowed.

    This function does not read the bottom $\len(B) - 1$ coefficients from 
    $A$, which means that they might not even need to exist in allocated 
    memory.

void _fmpz_mod_poly_divrem_divconquer(fmpz * Q, fmpz * R, 
    const fmpz * A, long lenA, const fmpz * B, long lenB, 
    const fmpz_t invB, const fmpz_t p)

    Computes \code{(Q, lenA - lenB + 1)}, \code{(R, lenA)} such that 
    $A = B Q + R$ and $0 \leq \len(R) < \len(B)$.

    Assumes that the leading coefficient of $B$ is invertible 
    modulo $p$, and that \code{invB} is the inverse.

    Assumes $\len(A) \geq \len(B) > 0$.  Allows zero-padding in 
    \code{(A, lenA)}.  No aliasing of input and output operands is 
    allowed.

void fmpz_mod_poly_divrem_divconquer(fmpz_mod_poly_t Q, fmpz_mod_poly_t R, 
    const fmpz_mod_poly_t A, const fmpz_mod_poly_t B)

    Computes $Q$, $R$ such that $A = B Q + R$ and $0 \leq \len(R) < \len(B)$.

    Assumes that $B$ is non-zero and that the leading coefficient 
    of $B$ is invertible modulo $p$.

void _fmpz_mod_poly_divrem(fmpz * Q, fmpz * R, const fmpz * A, long lenA, 
    const fmpz * B, long lenB, const fmpz_t invB, const fmpz_t p)

    Computes \code{(Q, lenA - lenB + 1)}, \code{(R, lenA)} such that 
    $A = B Q + R$ and $0 \leq \len(R) < \len(B)$.

    Assumes that $B$ is non-zero, that the leading coefficient 
    of $B$ is invertible modulo $p$ and that \code{invB} is 
    the inverse.

    Assumes $\len(A) \geq \len(B) > 0$.  Allows zero-padding in 
    \code{(A, lenA)}.  No aliasing of input and output operands is 
    allowed.

void fmpz_mod_poly_divrem(fmpz_mod_poly_t Q, fmpz_mod_poly_t R, 
                          const fmpz_mod_poly_t A, const fmpz_mod_poly_t B)

    Computes $Q$, $R$ such that $A = B Q + R$ and $0 \leq (R) < \len(B)$.

    Assumes that $B$ is non-zero and that the leading coefficient 
    of $B$ is invertible modulo $p$.

void _fmpz_mod_poly_inv_series_newton(fmpz * Qinv, const fmpz * Q, long n, 
                                      const fmpz_t cinv, const fmpz_t p)

    Sets \code{(Qinv, n)} to the inverse of \code{(Q, n)} modulo $x^n$, 
    where $n \geq 1$, assuming that the bottom coefficient of $Q$ is 
    invertible modulo $p$ and that its inverse is \code{cinv}.

void fmpz_mod_poly_inv_series_newton(fmpz_mod_poly_t Qinv, 
    const fmpz_mod_poly_t Q, long n)

    Sets \code{Qinv} to the inverse of \code{Q} modulo $x^n$, 
    where $n \geq 1$, assuming that the bottom coefficient of 
    $Q$ is a unit.

*******************************************************************************

    Greatest common divisor

*******************************************************************************

void fmpz_mod_poly_make_monic(fmpz_mod_poly_t res, const fmpz_mod_poly_t poly)

    If \code{poly} is non-zero, sets \code{res} to \code{poly} divided 
    by its leading coefficient.  This assumes that the leading coefficient 
    of \code{poly} is invertible modulo $p$.

    Otherwise, if \code{poly} is zero, sets \code{res} to zero.

long _fmpz_mod_poly_gcd_euclidean(fmpz *G, const fmpz *A, long lenA, 
                                           const fmpz *B, long lenB, 
                                           const fmpz_t invB, const fmpz_t p)

    Sets $G$ to the greatest common divisor of $(A, \len(A))$ 
    and $(B, \len(B))$ and returns its length.

    Assumes that $\len(A) \geq \len(B) > 0$ and that the vector $G$ has 
    space for sufficiently many coefficients.

    Assumes that \code{invB} is the inverse of the leading coefficients 
    of $B$ modulo the prime number $p$.

void fmpz_mod_poly_gcd_euclidean(fmpz_mod_poly_t G, 
                                 const fmpz_mod_poly_t A,
                                 const fmpz_mod_poly_t B)

    Sets $G$ to the greatest common divisor of $A$ and $B$.

    The algorithm used to compute $G$ is the classical Euclidean 
    algorithm.

    In general, the greatest common divisor is defined in the polynomial 
    ring $(\mathbf{Z}/(p \mathbf{Z}))[X]$ if and only if $p$ is a prime 
    number.  Thus, this function assumes that $p$ is prime.

*******************************************************************************

    Input and output

    The printing options supported by this module are very similar to 
    what can be found in the two related modules \code{fmpz_poly} and 
    \code{nmod_poly}.

    Consider, for example, the polynomial $f(x) = 5x^3 + 2x + 1$ in 
    $(\mathbf{Z}/6\mathbf{Z})[x]$.  Its simple string representation 
    is \code{"4 6  1 2 0 5"}, where the first two numbers denote the 
    length of the polynomial and the modulus.  The pretty string 
    representation is \code{"5*x^3+2*x+1"}.

*******************************************************************************

int _fmpz_mod_poly_fprint(FILE * file, const fmpz *poly, long len, 
                          const fmpz_t p)

    Prints the polynomial \code{(poly, len)} to the stream \code{file}.

    In case of success, returns a positive value.  In case of failure, 
    returns a non-positive value.

int fmpz_mod_poly_fprint(FILE * file, const fmpz_mod_poly_t poly)

    Prints the polynomial to the stream \code{file}.

    In case of success, returns a positive value.  In case of failure, 
    returns a non-positive value.

int fmpz_mod_poly_fprint_pretty(FILE * file, 
                                const fmpz_mod_poly_t poly, const char * x)

    Prints the pretty representation of \code{(poly, len)} to the stream 
    \code{file}, using the string \code{x} to represent the indeterminate.

    In case of success, returns a positive value.  In case of failure, 
    returns a non-positive value.

int fmpz_mod_poly_print(const fmpz_mod_poly_t poly)

    Prints the polynomial to \code{stdout}.

    In case of success, returns a positive value.  In case of failure, 
    returns a non-positive value.

int fmpz_mod_poly_print_pretty(const fmpz_mod_poly_t poly, const char * x)

    Prints the pretty representation of \code{poly} to \code{stdout},
    using the string \code{x} to represent the indeterminate.

    In case of success, returns a positive value.  In case of failure, 
    returns a non-positive value.

