/*============================================================================

    Copyright (C) 2010 William Hart
       
    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

===============================================================================*/

********************************************************************************

  Memory management

********************************************************************************

void nmod_poly_init(nmod_poly_t poly, mp_limb_t n)

   Initialise the poly. It will have coefficients mod n.

void nmod_poly_init_preinv(nmod_poly_t poly, mp_limb_t n, mp_limb_t ninv)

   Initialise the poly. It will have coefficients mod n. Supply 
   a precomputed inverse limb generated by n_preinvert_limb.


void nmod_poly_init2(nmod_poly_t poly, mp_limb_t n, ulong alloc)

  Initialise the poly. It will have coefficients mod n.
  Up to alloc coefficients may be stored in poly.

void nmod_poly_init2_preinv(nmod_poly_t poly, 
			           mp_limb_t n, mp_limb_t ninv, ulong alloc)

   Initialise the poly. It will have coefficients mod n. Supply 
   a precomputed inverse limb generated by n_preinvert_limb.
   Up to alloc coefficients may be stored in poly.

void nmod_poly_realloc(nmod_poly_t poly, ulong alloc)

   Reallocate the given poly to the given length. If the current
   length is less than alloc, the poly is truncated and normalised.
   If alloc is zero, the polynomial is cleared.

void nmod_poly_clear(nmod_poly_t poly)

   Clear the polynomial and release any memory it used. The poly
   cannot be used again until it is initialised.

void nmod_poly_fit_length(nmod_poly_t poly, ulong alloc)

   Ensure poly has space for at least alloc coefficients. This 
   function only ever grows the allocated space, so no data
   loss can occur.

********************************************************************************

  Basic manipulation

********************************************************************************

void _nmod_poly_normalise(nmod_poly_t poly)

   Internal function for normalising a poly so that the final 
   coefficient (if there are any at all) is not zero.

void nmod_poly_swap(nmod_poly_t poly1, nmod_poly_t poly2)

   Efficiently swap poly1 and poly2 by swapping pointers internally. 

********************************************************************************

  Random generation

********************************************************************************

void nmod_poly_randtest(nmod_poly_t poly, ulong length)

   Generate a random polynomial with up to the given length.

********************************************************************************

  Comparison

********************************************************************************

int nmod_poly_equal(nmod_poly_t a, nmod_poly_t b)

   Return 1 if the polynomials are equal, otherwise 0.

********************************************************************************

  Input/output

********************************************************************************

int nmod_poly_print(nmod_poly_t a)

   Print the polynomial to stdout. If the length is 0, only 0 is printed. 
   Otherwise the length followed by two spaces, followed by a space 
   separated list of coefficients is printed, beginning with the constant
   coefficient.

********************************************************************************

  Bit packing/unpacking

********************************************************************************

void _nmod_poly_bit_pack(mp_ptr res, mp_srcptr poly, ulong length, ulong bits)

   Pack length coefficients of poly into fields of the given number of bits in
   the large integer res, i.e. evaluate poly at 2^bits and store the result in 
   res. Assumes length > 0 and bits > 0. Also assumes that no coefficient of 
   poly is bigger than bits/2 bits. We also assume bits < 3*FLINT_BITS.

void _nmod_poly_bit_unpack(mp_ptr res, mp_srcptr mpn, 
                                          ulong length, ulong bits, nmod_t mod)

   Unpack length coefficients stored in the big integer mpn in bit fields of 
   the given number of bits, reduce them modulo the given modulus, then store
   them in the polynomial res. We assume length > 0, 3*FLINT_BITS > bits > 0.
   There are no restrictions on the size of the actual coefficients as stored
   within the bitfields. 

********************************************************************************

  Basic arithmetic

********************************************************************************

void nmod_poly_zero(nmod_poly_t res)
   
   Set res to the zero polynomial.

void nmod_poly_neg(nmod_poly_t res, const nmod_poly_t poly1)

   Set res to -poly1.

void _nmod_poly_add(mp_ptr res, mp_srcptr poly1, ulong len1, 
					     mp_srcptr poly2, ulong len2, nmod_t mod)

   Set res to { poly1, len1 } + { poly2, len2 }. There are no restrictions on the
   lengths.

void nmod_poly_add(nmod_poly_t res, const nmod_poly_t poly1, 
				                            const nmod_poly_t poly2)

   Set res to { poly1, len1 } + { poly2, len2 }. 

void _nmod_poly_sub(mp_ptr res, mp_srcptr poly1, ulong len1, 
					     mp_srcptr poly2, ulong len2, nmod_t mod)

   Set res to { poly1, len1 } - { poly2, len2 }. There are no restrictions on the
   lengths.

void nmod_poly_sub(nmod_poly_t res, const nmod_poly_t poly1, 
				                            const nmod_poly_t poly2)

   Set res to { poly1, len1 } - { poly2, len2 }.

void nmod_poly_scalar_mul(nmod_poly_t res, const nmod_poly_t poly1, mp_limb_t c)

   Set res to { poly1, len1 } * c, where c is reduced modulo the modulus of poly1.

void _nmod_poly_mul_classical(mp_ptr res, mp_srcptr poly1, 
			       ulong len1, mp_srcptr poly2, ulong len2, nmod_t mod)

   Set { res, len1 + len2 - 1 } to { poly1, len1 } * { poly2, len2 }. Assumes
   len1 >= len2 > 0.

void nmod_poly_mul_classical(nmod_poly_t res, 
                               const nmod_poly_t poly1, const nmod_poly_t poly2)

   Set res to poly1 * poly2.

