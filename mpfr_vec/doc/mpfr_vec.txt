/*============================================================================

    Copyright (C) 2010 William Hart
    Copyright (C) 2010 Andy Novocin

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

===============================================================================*/

********************************************************************************

  Memory management

********************************************************************************

__mpfr_struct * _mpfr_vec_init(ulong length, mp_bitcnt_t prec)

   Return a vector of the given length of initialised mpfr's with the
   given exact precision.
 
void _mpfr_vec_clear(__mpfr_struct * vec, ulong length)
 
   Clear the given vector.

********************************************************************************

  Arithmetic

********************************************************************************

void _mpfr_vec_zero(mpfr * vec, ulong length)

   Zero the vector {vec, length}

void _mpfr_vec_copy(mpfr * vec1, mpfr * vec2, ulong length)

   Copy the vector vec2 of the given length into vec1. No check is made to ensure
   vec1 and vec2 are different.

void _mpfr_vec_add(mpfr * res, mpfr * vec1, mpfr * vec2, ulong length)

   Add the given vectors of the given length together and store the result in res.

void _mpfr_vec_scalar_mul_mpfr(mpfr * res, mpfr * vec, ulong length, mpfr_t c)
   
   Multiply the vector with given length by the scalar c and set res to the result.

void _mpfr_vec_scalar_mul_2exp(mpfr * res, mpfr * vec, ulong length, mp_bitcnt_t exp)

   Multiply the given vector of the given length by 2^exp.

void _mpfr_vec_scalar_product(mpfr_t res, __mpfr_struct * vec1, 
                                             __mpfr_struct * vec2, ulong length)

   Set res to the scalar product of {vec1, length} with {vec2, length}. Assumes
   length > 0.

