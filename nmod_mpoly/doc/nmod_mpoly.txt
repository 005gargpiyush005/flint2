/*============================================================================

    Copyright (C) 2010 Daniel Woodhouse
       
    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

===============================================================================*/

********************************************************************************

  Memory management

********************************************************************************


void nmod_mpoly_init(nmod_mpoly_t poly, mp_limb_t n, long vars, ulong ebits)

   Initialise the poly. It will have coefficients mod n. The number of 
   variables is given by vars. The number of bits given to store the 
   exponent is given by ebits.

void nmod_mpoly_init_preinv(nmod_mpoly_t poly, mp_limb_t n, 
					mp_limb_t ninv, long vars, ulong ebits)

   Initialise the poly. It will have coefficients mod n. The number of 
   variables is given by vars. The number of bits given to store the 
   exponent is given by ebits. Supply a precomputed inverse limb 
   generated by n_preinvert_limb.


void nmod_mpoly_init2(nmod_mpoly_t poly,mp_limb_t n,
					 long alloc, long vars, ulong ebits)

   Initialise the poly. It will have coefficients mod n. The number of 
   variables is given by vars. The number of bits given to store the 
   exponent is given by ebits.Up to alloc coefficients may be stored 
   in poly.

void nmod_mpoly_init2_preinv(nmod_mpoly_t poly, mp_limb_t n,
			 mp_limb_t ninv, long alloc, long vars, ulong ebits)

   Initialise the poly. It will have coefficients mod n. The number of 
   variables is given by vars. The number of bits given to store the 
   exponent is given by ebits. Supply a precomputed inverse limb 
   generated by n_preinvert_limb. Up to alloc coefficients may be 
   stored in poly.

void nmod_mpoly_realloc(nmod_mpoly_t poly, ulong alloc)

   Reallocate the given poly to the given length. If the current
   length is less than alloc, the poly is truncated and normalised.
   If alloc is zero, the polynomial is cleared.

void nmod_mpoly_clear(nmod_mpoly_t poly)

   Clear the polynomial and release any memory it used. The poly
   cannot be used again until it is initialised.

void nmod_mpoly_fit_length(nmod_mpoly_t poly, ulong alloc)

   Ensure poly has space for at least alloc coefficients. This 
   function only ever grows the allocated space, so no data
   loss can occur.

mp_bitcnt_t nmod_mpoly_max_bits(nmod_mpoly_t poly)

   Returns the maximum number of bits of all the coefficients.


********************************************************************************

  Basic manipulation

********************************************************************************

void _nmod_mpoly_normalise(nmod_mpoly_t poly)

   Internal function for normalising a poly so that the final 
   coefficient (if there are any at all) is not zero.

void nmod_mpoly_set(nmod_mpoly_t a, nmod_mpoly_t b)
 
   Sets polynomial a to be polynomial b.

********************************************************************************

  Comparison

********************************************************************************

int nmod_mpoly_equal(nmod_mpoly_t a, nmod_mpoly_t b)

   Returns 1 if the two polynomials are the same, 0 if they are not.

********************************************************************************

  Random generation

********************************************************************************

void nmod_mpoly_randtest(nmod_mpoly_t poly, ulong length, flint_rand_t state)

   Generate a random polynomial with up to the given length.

********************************************************************************

  Basic arithmetic

********************************************************************************

void nmod_mpoly_mul_heap(nmod_mpoly_t res, nmod_mpoly_t poly1, nmod_mpoly_t poly2)

   Sets res to poly1 * poly2. Uses a heap algorithm. 

********************************************************************************

  Heap proceedures

********************************************************************************

void nmod_mpoly_reheapify(nmod_mpoly_heap_t * heap, ulong * n)

   Removes the entry at the top of the heap (hiding at the end of the heap), moves
   entries up the heap to fill in the space and reduces n by 1.

void nmod_mpoly_heap_insert(nmod_mpoly_heap_t * heap, ulong * n,
 					 nmod_mpoly_entry_t * entry, mp_limb_t exp)

   Inserts entry into the heap.

********************************************************************************

  Functions produced for Imperial

********************************************************************************

ulong nmod_mpoly_get_coeff(nmod_mpoly_t poly, ulong exp);

   Returns the coefficient of the exponent exp of polynomial poly. Exponent is
   given in the corresponding Croneker segmented form.

void get_period_sequence(fmpz_t *zeroCoefficients, long *coefficients, ulong *exponents, 
         ulong length, ulong monomial, int pow, ulong *primes, int numOfPrimes, ulong nvars);

   Gives the period sequence of a polynomial with *coefficients and *exponents 
   of length "length" up to power "pow". The constant coefficient is tracked with
   the ulong monomial. The primes required for the CRT is provided in the array
   *primes. The number of primes in the array must be given with numOfPrimes. 
   The number of primes must be given with nvars.
   This function only calculates half of the polynomials and works the rest out
   with nmod_mpoly_get_coeff_of_product. 

void get_period_sequence2(fmpz_t *zeroCoefficients, long *coefficients, ulong *exponents, 
        ulong length, ulong monomial, int pow, ulong *primes, int numOfPrimes, ulong nvars);

   Same as above only a lot slower. Calculates all the polynomials.  

ulong nmod_mpoly_get_coeff_of_product(nmod_mpoly_t poly1, nmod_mpoly_t poly2, ulong mon);

   Gets the coefficient with exponent mon of the product of the polynomials poly1 and
   poly2.
