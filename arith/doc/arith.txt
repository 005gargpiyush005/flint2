/*=============================================================================

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Copyright (C) 2010 Fredrik Johansson

******************************************************************************/

*******************************************************************************

    Factoring integers 

    An integer may be represented in factored form using the 
    \code{fmpz_factor_t} data structure. This consists of two \code{fmpz} 
    vectors representing bases and exponents, respectively. Canonically, 
    the bases will be prime numbers sorted in ascending order and the 
    exponents will be positive.

    A separate \code{int} field holds the sign, which may be $-1$, $0$ or $1$.

*******************************************************************************

void fmpz_factor_init(fmpz_factor_t factor)

    Initialises an \code{fmpz_factor_t} structure.

void fmpz_factor_clear(fmpz_factor_t factor)

    Clears an \code{fmpz_factor_t} structure.

void fmpz_factor(fmpz_factor_t factor, const fmpz_t n)

    Factors $n$ into prime numbers. If $n$ is zero or negative, the
    sign field of the \code{factor} object will be set accordingly.

    This currently only uses trial division, falling back to \code{n_factor()}
    as soon as the number shrinks to a single limb.

void fmpz_unfactor(fmpz_t n, const fmpz_factor_t factor)

    Evaluates an integer in factored form back to an \code{fmpz_t}.

    This currently exponentiates the bases separately and multiplies
    them together one by one, although much more efficient algorithms
    exist. 

*******************************************************************************

    Primorials

*******************************************************************************

void fmpz_primorial(fmpz_t res, long n)

    Sets \code{res} to ``$n$ primorial'' or $n \#$, the product of all prime 
    numbers less than or equal to $n$.

*******************************************************************************

    Harmonic numbers

*******************************************************************************

void _harmonic_number(fmpz_t num, fmpz_t den, long n)

    Sets \code{(num, den)} to the reduced numerator and denominator of
    the $n$-th harmonic number $H_n = 1 + 1/2 + 1/3 + \dotsb + 1/n$. The
    result is zero if $n \leq 0$.

    Table lookup is used for $H_n$ whose numerator and denominator 
    fit in single limb. For larger $n$, the function
    \code{mpn_harmonic_odd_balanced()} is used.

void harmonic_number(fmpq_t x, long n)

    Sets \code{x} to the $n$-th harmonic number. This function is
    equivalent to \code{_harmonic_number} apart from the output
    being a single \code{fmpq_t} variable.

*******************************************************************************

    Stirling numbers

*******************************************************************************

void stirling_number_1u(fmpz_t s, long n, long k)

void stirling_number_1(fmpz_t s, long n, long k)

void stirling_number_2(fmpz_t s, long n, long k)

    Sets $s$ to $S(n,k)$ where $S(n,k)$ denotes an unsigned Stirling
    number of the first kind $\abs{S_1(n, k)}$, a signed Stirling number 
    of the first kind $S_1(n, k)$, or a Stirling number of the second 
    kind $S_2(n, k)$.  The Stirling numbers are defined using the 
    generating functions
    \begin{align*}
        x_{(n)} & = \sum_{k=0}^n S_1(n,k) x^k \\
        x^{(n)} & = \sum_{k=0}^n \abs{S_1(n,k)} x^k \\
        x^n     & = \sum_{k=0}^n S_2(n,k) x_{(k)}
    \end{align*}
    where $x_{(n)} = x(x-1)(x-2) \dotsm (x-n+1)$ is a falling factorial 
    and $x^{(n)} = x(x+1)(x+2) \dotsm (x+n-1)$ is a rising factorial.
    $S(n,k)$ is taken to be zero if $n < 0$ or $k < 0$.

    These three functions are useful for computing isolated Stirling 
    numbers efficiently. To compute a range of numbers, the vector or 
    matrix versions should generally be used.

void stirling_number_1u(fmpz * row, long n, long klen)
void stirling_number_1(fmpz * row, long n, long klen)
void stirling_number_2(fmpz * row, long n, long klen)

    Computes the row of Stirling numbers
    \code{S(n,0), S(n,1), S(n,2), ..., S(n,klen-1)}.

    To compute a full row, this function can be called with 
    \code{klen = n+1}. It is assumed that \code{klen} is at most $n + 1$.

void stirling_number_1u_vec_next(fmpz * row, fmpz * prev, long n, long klen)
void stirling_number_1_vec_next(fmpz * row, fmpz * prev, long n, long klen)
void stirling_number_2_vec_next(fmpz * row, fmpz * prev, long n, long klen)

    Given the vector \code{prev} containing a row of Stirling numbers
    \code{S(n-1,0), S(n-1,1), S(n-1,2), ..., S(n-1,klen-2)}, computes
    and stores in the row argument 
    \code{S(n,0), S(n,1), S(n,2), ..., S(n,klen-1)}.
    It is assumed that \code{klen} is at most $n + 1$.

    The \code{row} and \code{prev} arguments are permitted to be the 
    same, meaning that the row will be updated in-place.

void stirling_number_1u_mat(fmpz_mat_t mat)
void stirling_number_1_mat(fmpz_mat_t mat)
void stirling_number_2_mat(fmpz_mat_t mat)

    For an arbitrary $m$-by-$n$ matrix, writes the truncation of the
    infinite Stirling number matrix 

    \begin{lstlisting}
    row 0   : S(0,0)
    row 1   : S(1,0), S(1,1)
    row 2   : S(2,0), S(2,1), S(2,2)
    row 3   : S(3,0), S(3,1), S(3,2), S(3,3)
    \end{lstlisting}

    up to row $m-1$ and column $n-1$ inclusive. The upper triangular
    part of the matrix is zeroed.

    For any $n$, the $S_1$ and $S_2$ matrices thus obtained are 
    inverses of each other.

*******************************************************************************

    Bell numbers

*******************************************************************************

void bell_number(fmpz_t b, ulong n)

    Sets \code{b} to the \code{n}:th Bell number $B_n$, defined as the
    number of partitions of a set with \code{n} members. Equivalently,
    $B_n = \sum_{k=0}^n S_2(n,k)$ where $S_2(n,k)$ denotes a Stirling number
    of the second kind.

    This function uses a table lookup if $B_n$ fits in a single word,
    and otherwise evaluates a precise truncation of the series
    $B_n = e^{-1} \sum_{k=0}^{\infty} \frac{k^n}{k!}$ using binary splitting.

void bell_number_vec(fmpz * b, long n)

    Sets \code{b} to the vector of Bell numbers $B_0, B_1, \ldots, B_{n-1}$
    inclusive. Automatically switches between the \code{recursive}
    and \code{multi_mod} algorithms depending on the size of $n$.

double bell_number_size(ulong n)

    Returns $b$ such that $B_n < 2^{\lfloor b \rfloor}$, using the inequality
    $$B_n < \left(\frac{0.792n}{\log(n+1)}\right)^n$$
    which is given in \cite{BerTas2010}.

void _bell_number_vec_recursive(fmpz * b, long n)

    Sets \code{b} to the vector of Bell numbers $B_0, B_1, \ldots, B_{n-1}$
    inclusive. This function uses table lookup if $B_{n-1}$ fits in a
    single word, and a simple triangular recurrence otherwise.

void _bell_number_vec_multi_mod(fmpz * b, long n)

    Sets \code{b} to the vector of Bell numbers $B_0, B_1, \ldots, B_{n-1}$
    inclusive.

    This function evaluates the Bell numbers modulo several limb-size
    primes using the exponential generating function
    $$e^{e^x-1} = \sum_{n=0}^{\infty} \frac{B_n}{n!} x^n$$ and
    \code{nmod_poly} arithmetic. A tight bound for the number of needed
    primes is computed using \code{bell_number_size}, and the final
    integer values are recovered using balanced CRT reconstruction.


*******************************************************************************

    Bernoulli numbers and polynomials

*******************************************************************************

void _bernoulli_number(fmpz_t num, fmpz_t den, ulong n)

    Sets \code{(num, den)} to the reduced numerator and denominator
    of the $n$-th Bernoulli number. As presently implemented,
    this function simply calls \code{_bernoulli_number_zeta}.

void bernoulli_number(fmpq_t x, ulong n)

    Sets \code{x} to the $n$-th Bernoulli number. This function is
    equivalent to \code{_bernoulli_number} apart from the output
    being a single \code{fmpq_t} variable.

void _bernoulli_number_vec(fmpz * num, fmpz * den, long n)

    Sets the elements of \code{num} and \code{den} to the reduced
    numerators and denominators of the Bernoulli numbers
    $B_0, B_1, B_2, \ldots, B_{n-1}$ inclusive. This function automatically
    chooses between the \code{recursive}, \code{zeta} and \code{multi_mod}
    algorithms according to the size of $n$.

void bernoulli_number_vec(fmpq * x, long n)

    Sets the \code{x} to the vector of Bernoulli numbers
    $B_0, B_1, B_2, \ldots, B_{n-1}$ inclusive. This function is
    equivalent to \code{_bernoulli_number_vec} apart
    from the output being a single \code{fmpq} vector.

void bernoulli_number_denom(fmpz_t den, ulong n)

    Sets \code{den} to the reduced denominator of the $n$-th
    Bernoulli number $B_n$. For even $n$, the denominator is computed
    as the product of all primes $p$ for which $p - 1$ divides $n$;
    this property is a consequence of the von Staudt-Clausen theorem.
    For odd $n$, the denominator is trivial (\code{den} is set to 1 whenever
    $B_n = 0$). The initial sequence of values smaller than $2^{32}$ are
    looked up directly from a table.

double bernoulli_number_size(ulong n)

    Returns $b$ such that $|B_n| < 2^{\lfloor b \rfloor}$, using the inequality
    $$|B_n| < \frac{4 n!}{(2\pi)^n}$$ and $n! \le (n+1)^{n+1} e^{-n}$.
    No special treatment is given to odd $n$. Accuracy is not guaranteed
    if $n > 10^{14}$.

void bernoulli_polynomial(fmpq_poly_t poly, ulong n)

    Sets \code{poly} to the Bernoulli polynomial of degree $n$,
    $B_n(x) = \sum_{k=0}^n \binom{n}{k} B_k x^{n-k}$ where $B_k$
    is a Bernoulli number. This function basically calls
    \code{bernoulli_number_vec} and then rescales the coefficients
    efficiently.

void _bernoulli_number_zeta(fmpz_t num, fmpz_t den, ulong n)

    Sets \code{(num, den)} to the reduced numerator and denominator
    of the $n$-th Bernoulli number.

    This function first computes the exact denominator and a bound
    for the size of the numerator. It then computes an approximation
    of $|B_n| = 2n! \zeta(n) / (2 \pi)^n$ as a floating-point number
    and multiplies by the denominator to to obtain a real number
    that rounds to the exact numerator. For tiny $n$, the numerator
    is looked up from a table to avoid unnecessary overhead.

void _bernoulli_number_vec_recursive(fmpz * num, fmpz * den, long n)

    Sets the elements of \code{num} and \code{den} to the reduced
    numerators and denominators of $B_0, B_1, B_2, \ldots, B_{n-1}$
    inclusive.

    The first few entries are computed using \code{bernoulli_number},
    and then Ramanujan's recursive formula expressing $B_m$ as a sum over
    $B_k$ for $k$ congruent to $m$ modulo 6 is applied repeatedly.

    To avoid costly GCDs, the numerators are transformed internally
    to a common denominator and all operations are performed using
    integer arithmetic. This makes the algorithm fast for small $n$,
    say $n < 1000$. The common denominator is calculated directly
    as the primorial of $n + 1$.

    %[1] http://en.wikipedia.org/w/index.php?
    %    title=Bernoulli_number&oldid=405938876

void _bernoulli_number_vec_zeta(fmpz * num, fmpz * den, long n)

    Sets the elements of \code{num} and \code{den} to the reduced
    numerators and denominators of $B_0, B_1, B_2, \ldots, B_{n-1}$
    inclusive. Uses repeated direct calls to \code{_bernoulli_number_zeta}.

void _bernoulli_number_vec_multi_mod(fmpz * num, fmpz * den, long n)

    Sets the elements of \code{num} and \code{den} to the reduced
    numerators and denominators of $B_0, B_1, B_2, \ldots, B_{n-1}$
    inclusive. Uses the generating function 

    $$\frac{x^2}{\cosh(x)-1} = \sum_{k=0}^{\infty}
        \frac{(2-4k) B_{2k}}{(2k)!} x^{2k}$$

    which is evaluated modulo several limb-size primes using \code{nmod_poly}
    arithmetic to yield the numerators of the Bernoulli numbers after
    multiplication by the denominators and CRT reconstruction. This formula,
    given (incorrectly) in \citep{BuhlerCrandallSompolski1992}, saves about
    half of the time compared to the usual generating function $x/(e^x-1)$
    since the odd terms vanish.

*******************************************************************************

    Euler numbers and polynomials

    Euler numbers are the integers $E_n$ defined by
    $$\frac{1}{\cosh(t)} = \sum_{n=0}^{\infty} \frac{E_n}{n!} t^n.$$
    With this convention, the odd-indexed numbers are zero and the even
    ones alternate signs, viz.
    $E_0, E_1, E_2, \ldots = 1, 0, -1, 0, 5, 0, -61, 0, 1385, 0, \ldots$.
    The corresponding Euler polynomials are defined by
    $$\frac{2e^{xt}}{e^t+1} = \sum_{n=0}^{\infty} \frac{E_n(x)}{n!} t^n.$$

*******************************************************************************

void euler_number(fmpz_t res, ulong n)

    Sets \code{res} to the Euler number $E_n$. Currently calls
    \code{_euler_number_zeta}.

void euler_number_vec(fmpz * res, long n)

    Computes the Euler numbers $E_0, E_1, \dotsc, E_{n-1}$ for $n \geq 0$
    and stores the result in \code{res}, which must be an initialised
    \code{fmpz} vector of sufficient size.

    This function evaluates the even-index $E_k$ modulo several limb-size
    primes using the generating function and \code{nmod_poly} arithmetic.
    A tight bound for the number of needed primes is computed using
    \code{euler_number_size}, and the final integer values are recovered
    using balanced CRT reconstruction.

double euler_number_size(ulong n)

    Returns $b$ such that $|E_n| < 2^{\lfloor b \rfloor}$, using the inequality
    $$|E_n| < \frac{2^{n+2} n!}{\pi^{n+1}}$$ and $n! \le (n+1)^{n+1} e^{-n}$.
    No special treatment is given to odd $n$.
    Accuracy is not guaranteed if $n > 10^{14}$.

void euler_polynomial(fmpq_poly_t poly, ulong n)

    Sets \code{poly} to the Euler polynomial $E_n(x)$. Uses the formula
    $$E_n(x) = \frac{2}{n+1}\left(B_{n+1}(x) - 
        2^{n+1}B_{n+1}\left(\frac{x}{2}\right)\right),$$
    with the Bernoulli polynomial $B_{n+1}(x)$ evaluated once
    using \code{bernoulli_polynomial} and then rescaled.

void _euler_number_zeta(fmpz_t res, ulong n)

    Sets \code{res} to the Euler number $E_n$. For even $n$, this function
    uses the relation $$|E_n| = \frac{2^{n+2} n!}{\pi^{n+1}} L(n+1)$$
    where $L(n+1)$ denotes the Dirichlet $L$-function with character
    $\chi = \{ 0, 1, 0, -1 \}$.

*******************************************************************************

    Legendre polynomials

*******************************************************************************

void legendre_polynomial(fmpq_poly_t poly, ulong n)

    Sets \code{poly} to the $n$-th Legendre polynomial
    $$P_n(x) = \frac{1}{2^n n!} \frac{d^n}{dx^n} \left[
        \left(x^2-1\right)^n \right].$$
    The coefficients are calculated using a hypergeometric recurrence.
    To improve performance, the common denominator is computed in one step
    and the coefficients are evaluated using integer arithmetic. The
    denominator is given by
    $\gcd(n!,2^n) = 2^{\lfloor n/2 \rfloor + \lfloor n/4 \rfloor + \ldots}.$

*******************************************************************************

    Multiplicative functions

*******************************************************************************

void fmpz_euler_phi(fmpz_t res, const fmpz_t n)

    Sets \code{res} to the Euler totient function $\phi(n)$, counting the 
    number of positive integers less than or equal to $n$ that are coprime 
    to $n$.

int fmpz_moebius_mu(const fmpz_t n)

    Computes the Moebius function $\mu(n)$, which is defined as $\mu(n) = 0$ 
    if $n$ has a prime factor of multiplicity greater than $1$, $\mu(n) = -1$ 
    if $n$ has an odd number of distinct prime factors, and $\mu(n) = 1$ if 
    $n$ has an even number of distinct prime factors.  By convention, 
    $\mu(0) = 0$.

void fmpz_divisor_sigma(fmpz_t res, const fmpz_t n, ulong k)

    Sets \code{res} to $\sigma_k(n)$, the sum of $k$th powers of all 
    divisors of $n$.

void fmpz_divisors(fmpz_poly_t res, const fmpz_t n)

    Set the coefficients of the polynomial \code{res} to the divisors of $n$, 
    including $1$ and $n$ itself, in ascending order.

void fmpz_ramanujan_tau(fmpz_t res, const fmpz_t n)

    Sets \code{res} to the Ramanujan tau function $\tau(n)$ which is the 
    coefficient of $q^n$ in the series expansion of 
    $f(q) = q  \prod_{k \geq 1} \bigl(1 - q^k\bigr)^{24}$.

    We factor $n$ and use the identity $\tau(pq) = \tau(p) \tau(q)$ 
    along with the recursion 
    $\tau(p^{r+1}) = \tau(p) \tau(p^r) - p^{11} \tau(p^{r-1})$
    for prime powers.

    The base values $\tau(p)$ are obtained using the function 
    \code{fmpz_poly_ramanujan_tau()}. Thus the speed of 
    \code{fmpz_ramanujan_tau()} depends on the largest prime factor of $n$.

    Future improvement:  optimise this function for small $n$, which 
    could be accomplished using a lookup table or by calling 
    \code{fmpz_poly_ramanujan_tau()} directly.

void fmpz_poly_ramanujan_tau(fmpz_poly_t res, long n)

    Sets \code{res} to the polynomial with coefficients 
    $\tau(0),\tau(1), \dotsc, \tau(n-1)$, giving the initial $n$ terms 
    in the series expansion of 
    $f(q) = q \prod_{k \geq 1} \bigl(1-q^k\bigr)^{24}$.

    The algorithm is borrowed from the \code{delta_qexp()} function in 
    Sage, written by William Stein and David Harvey, and consists of 
    expanding the series of the equivalent representation 
    \begin{equation*}
    f(q) = q  \Biggl( \sum_{k \geq 0} (-1)^k (2k+1) q^{k(k+1)/2} \Biggr)^8.
    \end{equation*}

    The first squaring is done directly since the polynomial is very 
    sparse at this point.


*******************************************************************************

    Swinnerton-Dyer polynomials

*******************************************************************************

void swinnerton_dyer_polynomial(fmpz_poly_t poly, ulong n)

    Sets \code{poly} to the Swinnerton-Dyer polynomial $S_n$, defined as
    the integer polynomial
    $$S_n = \prod (x \pm \sqrt{2} \pm \sqrt{3}
        \pm \sqrt{5} \pm \ldots \pm \sqrt{p_n})$$
    where $p_n$ denotes the $n$-th prime number and all combinations
    of signs are taken. This polynomial has degree $2^n$ and is
    irreducible over the integers.


*******************************************************************************

    Partition function

*******************************************************************************

void partition_function_vec(fmpz * res, long len)

    Computes first \code{len} values of the partition function $p(n)$
    starting with $p(0)$. Uses inversion of Euler's pentagonal series.


void partition_function_nmod_vec(mp_ptr res, long len, nmod_t mod)

    Computes first \code{len} values of the partition function $p(n)$
    starting with $p(0)$, modulo the modulus defined by \code{mod}.
    Uses inversion of Euler's pentagonal series.


*******************************************************************************

    Landau's function

*******************************************************************************

void landau_function_vec(fmpz * res, long len)

    Computes the first \code{len} values of Landau's function $g(n)$
    starting with $g(0)$. Landau's function gives the largest order
    of an element of the symmetric group $S_n$.

    Implements the ``basic algorithm'' given in
    \cite{DelegliseNicolasZimmermann2009}. The running time is
    $O(n^{3/2} / \sqrt{\log n})$.
