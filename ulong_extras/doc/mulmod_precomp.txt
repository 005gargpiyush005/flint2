/*============================================================================

    Copyright (C) 2009 William Hart

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

===============================================================================*/

n_mulmod_precomp(mp_limb_t a, mp_limb_t b, mp_limb_t n, double ninv)

   Returns (a * b) % n given a precomputed inverse of n computed by 
   n_precompute_inverse(n). We require n < 2^53 and 0 <= a, b < n.

   We assume the processor is in the standard round to nearest
   mode. Thus ninv is correct to 53 binary bits (the least significant 
   bit of which we shall call a place) and can be at most half a place
   out. The product of a and b is computed with error at most half a 
   place. When a*b is multiplied by n we find that the exact quotient
   and computed quotient differ by less than two places. As the quotient 
   is less than n this means that the exact quotient is at most 1 away
   from the computed quotient. We truncate this quotient to an integer
   which reduces the value by less than 1. We end up with a value which
   can be no more than two above the quotient we are after and no less 
   than two below. However an argument similar to that for n_mod_precomp
   shows that the truncated computed quotient cannot be two smaller than 
   the truncated exact quotient. In other words the computed integer 
   quotient is at most two above and one below the quotient we are after.
