/*============================================================================

    Copyright (C) 2009 William Hart

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

===============================================================================*/

n_mod_precomp(mp_limb_t a, mp_limb_t n, double ninv)

   Returns a % n given a precomputed inverse of n computed by 
   n_precompute_inverse(n). We require n < 2^53 and n < 
   2^(FLINT_BITS-1) and 0 <= a < n^2.

   We assume the processor is in the standard round to nearest
   mode. Thus ninv is correct to 53 binary bits (the least significant 
   bit of which we shall call a place) and can be at most half a place
   out. When a is multiplied by n, the binary representation
   of a is exact and the mantissa is < 2, thus we see that m*ninv 
   can be at most one out in the mantissa. We now truncate m*ninv
   to the nearest integer, which is always a round down. Either we 
   already have an integer, or we need to make a change down of at 
   least 1 in the last place. In the latter case we either get 
   precisely the exact quotient or below it as when we rounded the
   product to the nearest place we changed by at most half a place.
   In the case that truncating to an integer takes us below the
   exact quotient, we have rounded down by less than 1 plus half a 
   place. But as the product is less than n and n is less than 2^53,
   half a place is less than 1, thus we are out by less than 2 from 
   the exact quotient, i.e. the quotient we have computed is the 
   quotient we are after or one too small. That leaves only the case 
   where we had to round up to the nearest place which happened to 
   be an integer, so that truncating to an integer didn't change 
   anything. But this implies that the exact quotient a/n is less 
   than 1/2^54 from an integer. But this is impossible, as n < 2^53. 
   Thus the quotient we have computed is either exactly what we are 
   after, or one too small.