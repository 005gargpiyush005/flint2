/*============================================================================

    Copyright (C) 2009 William Hart

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

===============================================================================*/

int n_is_prime_pocklington(mp_limb_t n, ulong iterations)

   Tests if n is a prime using the Pocklington-Lehmer primality
   test. This does not fully implement the algorithm. If 1 is 
   returned n has been proved prime. If 0 is returned n is 
   composite. However -1 may be returned if nothing was proved 
   either way. This happens perhaps 8% of the time. 

   The most time consuming part of the algorithm is factoring 
   n - 1. For this reason n_factor_partial1 is used, which uses
   a combination of trial factoring and "one line" factor to 
   try to quickly factor n. Additionally if the cofactor is
   less than the square root of n - 1 the algorithm can still
   proceed.

   One can also specify a number of iterations if less time 
   should be taken. Simply set this to ~0L if this is irrelevant.
   In most cases a greater number of iterations will not 
   significantly affect timings as most of the time is spent 
   factoring.

   See;
   http://mathworld.wolfram.com/PocklingtonsTheorem.html
   for a description of the algorithm.