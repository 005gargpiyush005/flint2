/*============================================================================

    Copyright (C) 2009 William Hart

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

===============================================================================*/

int n_is_oddprime_binary(mp_limb_t n) 
   
   This function performs a simple binary search through 
   flint_primes for n. If it exists in the array it returns
   1, otherwise 0. For the algorithm to operate correctly 
   n should be odd and >= 17. 

   The algorithm works by taking two approximations to
   pi(n). The upper approximation is 1.25506 n / ln n, the
   lower by n/ln n. These bounds are due to Rosser and 
   Schoenfeld 1962 which are valid for n >= 17. 

   We use the number of bits in n (or one less) to form an 
   approximation to ln n, taking care to use a value too
   small or too large to maintain the inequality.

   Once we have bounds on where to look in the table, we 
   refine our search with a simple binary algorithm, taking
   the top or bottom of the current interval as necessary.

   Some care is taken at the top of the table to not overrun.