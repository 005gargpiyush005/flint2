TODO
====

general
-------

* get rid of global random states

* Write a flint2 memory manager, both reentrant and non-reentrant stack based
  versions

* Write a configure script for flint2 which has an option for
  reentrant/non-reentrant

* [maybe] a type mpfr which is an alias for __mpfr_struct and using throughout


fmpz
----

* fmpz_single currently hangs on to all mpz's. It might be better to release
  ones that are over a certain size (careful, checking every single one might
  be expensive. It might be better to have some kind of garbage collection;
  then again checking whether the garbage collection needs to be run every time
  also costs time, though a garbage collector can do more).

* Use fmpz_init and fmpz_clear in the t-fmpz test

* Check and improve the functions fmpz_sizeinbase, fmpz_get_str and 
  fmpz_set_str, which in a first adhoc implementation only wrap the GMP/ MPIR 
  functionality.  Once this has been done, also include test code for these

* [maybe] figure out how to write robust test code for fmpz_read (which reads
  from stdin), perhaps using a pipe

* Inline or create inline versions of core fmpz functions.

* Inline _fmpz_demote_val and try to cover the cases size == -1, 0, 1
  with a single or at most two branches.

* Inline mpz_get/set_ui in core fmpz functions.

* [maybe] Avoid the double allocation of both an mpz struct and limb data,
  having an fmpz point directly to a combined structure. This would require
  writing replacements for most mpz functions.


ulong_extras
------------

* Jeff Gilchrist has confirmed that the standard BPSW primality test returns
  no pseudoprimes to 2^64. http://gilchrist.ca/jeff/factoring/pseudoprimes.html
  We should implement this test as specified and use this for primality testing
  up to 2^64. From private correspondence, Jeff tells me the BPSW variant used
  is that implemented by T.R. Nicely: http://www.trnicely.net/misc/bpsw.html
  Thus, if we want to use this algorithm, we must specifically use that version
  of the algorithm.

* in is_prime_pocklington allow the cofactor to be a perfect power not just
  prime

* Jeff Gilchrist has confirmed that the standard BPSW primality test returns no pseudoprimes 
  to 2^64. http://gilchrist.ca/jeff/factoring/pseudoprimes.html We should implement this test
  as specified and use this for primality testing up to 2^64. From private correspondence,
  Jeff tells me the BPSW variant used is that implemented by T.R. Nicely:
  http://www.trnicely.net/misc/bpsw.html Thus, if we want to use this algorithm, we must
  specifically use that version of the algorithm.

* in is_prime_pocklington allow the cofactor to be a perfect power not just prime
